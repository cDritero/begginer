/* Выборка данных */
CREATE TABLE book(                                      /* Для создания таблицы используется SQL-запрос. В нем указывается какая таблица создается, из каких атрибутов(полей) она состоит и какой тип данных имеет каждое поле, при необходимости указывается описание полей  */
    book_id INT PRIMARY KEY AUTO_INCREMENT,     
    title VARCHAR(50),
    author VARCHAR(30),
    price DECIMAL(8, 2),
    amount INT
);     /* В конце SQL-запроса ставится точка с запятой (хотя если Вы пишете один запрос, это необязательно) */

INSERT INTO book (title, author, price, amount) 
VALUES ('Мастер и Маргарита', 'Булгаков М.А.', 670.99, 3);   /*Для занесения новой записи в таблицу используется SQL запрос, в котором указывается в какую таблицу, в какие поля заносить новые значения.*/
INSERT INTO book (title, author, price, amount)
VALUES ('Белая гвардия', 'Булгаков М.А.', 540.50, 5);
INSERT INTO book (title, author, price, amount)
VALUES ('Идиот', 'Достоевский Ф.М.', 460.00, 10);
INSERT INTO book (title, author, price, amount)
VALUES ('Братья Карамазовы', 'Достоевский Ф.М.', 799.01, 2);

SELECT * FROM book;  /* отобрать все данные из таблицы book */

SELECT author, title, price FROM book;

SELECT title AS Название,  author AS Автор
FROM book;

SELECT title, amount,
     amount * 1.65 AS pack 
FROM book;

SELECT title, 
    author,
    amount,
    ROUND((price*0.7),2) AS new_price  /*  округляет значение x до k знаков после запятой, если k не указано – x округляется до целого */
FROM book;

SELECT author, title,
    ROUND(IF(author = 'Булгаков М.А.', price * 1.1, IF(author = 'Есенин С.А.', price * 1.05, price)), 2) AS new_price  /* подняли цену на определенных авторов с помощью IF(логическое_выражение, выражение_1, выражение_2)  */
  FROM book;

SELECT author, title, price
FROM book
WHERE amount<10; /* С помощью запросов можно включать в итоговую выборку не все строки исходной таблицы, а только те, которые отвечают некоторому условию. */

SELECT title, author, price, amount
FROM book
WHERE (price<500 OR price>600) AND amount*price > 4999.99;

SELECT title, author
FROM book
WHERE (price BETWEEN 540.50 AND 800) AND amount IN (2, 3, 5, 7);


SELECT author, title
FROM book
WHERE amount >= 2 AND amount <= 14
ORDER BY author DESC, title; /*  При выборке можно указывать столбец или несколько столбцов, по которым необходимо отсортировать отобранные строк 
				ORDER BY выполняет сортировку по возрастанию. Чтобы управлять направлением сортировки вручную, после имени столбца указывается ключевое слово ASC (по возрастанию) или DESC (по убыванию) */


SELECT title, author
FROM book
WHERE title LIKE "% %" 
    AND title NOT LIKE " "
    AND author LIKE "%С.%"
ORDER BY title ASC;   /*   WHERE   title LIKE "_% и _%" отбирает слово И внутри названия 
  			  OR title LIKE "и _%" Отбирает слово И в начале названия 
   			 OR title LIKE "_% и" отбирает слово И в конце названия
   			 OR title LIKE "и"  отбирает название, состоящее из одного слова И */




/* Запросы, групповые операции */


/* Выбрать различных авторов, книги которых хранятся в таблице book. */
SELECT DISTINCT author   
FROM book;

/*  Другой способ – использование оператора GROUP BY, который группирует данные при выборке, имеющие одинаковые значения в некотором столбце. Столбец, по которому осуществляется группировка, указывается после GROUP BY */
SELECT  author
FROM book
GROUP BY author;   

/*  Посчитать, количество различных книг и количество экземпляров книг каждого автора , хранящихся на складе.  Столбцы назвать Автор, Различных_книг и Количество_экземпляров соответственно.  */
SELECT author AS Автор, COUNT(title) AS Различных_книг, SUM(amount) AS Количество_экземпляров     
FROM book
GROUP BY author;

/* К групповым функциям SQL относятся: MIN(), MAX() и AVG(), которые вычисляют минимальное, максимальное и среднее значение элементов столбца */
SELECT author, MIN(price) AS Минимальная_цена, MAX(price) AS Максимальная_цена, AVG(price) AS Средняя_цена 
FROM book
GROUP BY author;



